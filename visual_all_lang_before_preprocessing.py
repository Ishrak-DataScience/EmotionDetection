# -*- coding: utf-8 -*-
"""Visual_All_Lang_Before_Preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19mvnd1twIq-QzXOGB7qiOoN0sr-fWfDs

Visualization Before Preprocessing for All Data - Track A
"""

import os
import pandas as pd

folder_path = "/content/drive/MyDrive/TUD Master/LLM/train"
file_names = [
    'eng.csv', 'amh.csv', 'sun.csv', 'chn.csv', 'mar.csv', 'tir.csv',
    'esp.csv', 'ibo.csv', 'ukr.csv', 'hin.csv', 'deu.csv', 'som.csv',
    'swe.csv', 'kin.csv', 'vmw.csv', 'ptbr.csv', 'orm.csv', 'ary.csv',
    'pcm.csv', 'yor.csv', 'hau.csv', 'afr.csv', 'arq.csv', 'swa.csv',
    'tat.csv', 'rus.csv', 'ptmz.csv', 'ron.csv'
]
readable_names = {
    'eng': 'English', 'amh': 'Amharic', 'sun': 'Sundanese', 'chn': 'Chinese', 'mar': 'Marathi', 'tir': 'Tigrinya',
    'esp': 'Spanish', 'ibo': 'Igbo', 'ukr': 'Ukrainian', 'hin': 'Hindi', 'deu': 'German', 'som': 'Somali',
    'swe': 'Swedish', 'kin': 'Kinyarwanda', 'vmw': 'Makhuwa', 'ptbr': 'Portuguese (Brazil)', 'orm': 'Oromo', 'ary': 'Moroccan Arabic',
    'pcm': 'Nigerian Pidgin', 'yor': 'Yoruba', 'hau': 'Hausa', 'afr': 'Afrikaans', 'arq': 'Algerian Arabic', 'swa': 'Swahili',
    'tat': 'Tatar', 'rus': 'Russian', 'ptmz': 'Portuguese (Mozambique)', 'ron': 'Romanian'
}

emotion_columns = ['Anger', 'Fear', 'Joy', 'Sadness', 'Surprise', 'Disgust']
all_emotion_data = []

for file_name in file_names:
    file_path = os.path.join(folder_path, file_name)
    try:
        df = pd.read_csv(file_path)
        for col in emotion_columns:
            if col.lower() not in [c.lower() for c in df.columns]:
                df[col] = 0  # Add missing columns with default value 0
            else:
                correct_col = next((c for c in df.columns if c.lower() == col.lower()), None)
                if correct_col and correct_col != col:
                    df.rename(columns={correct_col: col}, inplace=True)

        df['Neutral'] = (df[emotion_columns].sum(axis=1) == 0).astype(int)

        emotion_counts = df[emotion_columns + ['Neutral']].sum()
        total_count = emotion_counts.sum()

        language_code = file_name.split('.')[0]
        emotion_data = {
            'Language_Name': readable_names.get(language_code, language_code),
            'Language': language_code,
            **emotion_counts.to_dict(),
            'Total': total_count
        }
        all_emotion_data.append(emotion_data)
    except FileNotFoundError:
        print(f"File not found: {file_path}")
    except Exception as e:
        print(f"An error occurred while processing {file_name}: {e}")

emotion_summary_df = pd.DataFrame(all_emotion_data)
emotion_summary_df = emotion_summary_df.set_index('Language')

# Compute percentage representation
total_sum = emotion_summary_df['Total'].sum()
emotion_summary_df['Percentage'] = (emotion_summary_df['Total'] / total_sum * 100).round().astype(int)

# Add total row
total_row = emotion_summary_df.sum(numeric_only=True)
total_row['Language_Name'] = 'Total'
total_row['Total'] = int(total_row['Total'])  # Ensure total count is an integer
total_row[emotion_columns + ['Neutral']] = total_row[emotion_columns + ['Neutral']].astype(int)
emotion_summary_df = pd.concat([emotion_summary_df, total_row.to_frame().T], ignore_index=True)

# Compute percentage row for each emotion
total_emotion_counts = emotion_summary_df.iloc[:-1][emotion_columns + ['Neutral']].sum()
total_percentage_row = (total_emotion_counts / total_emotion_counts.sum() * 100).round().astype(int)
total_percentage_row['Language_Name'] = 'Total Percentage'
total_percentage_row['Total'] = ''
total_percentage_row['Percentage'] = ''

# Append percentage row
total_percentage_df = pd.DataFrame([total_percentage_row])
emotion_summary_df = pd.concat([emotion_summary_df, total_percentage_df], ignore_index=True)

# Reset index to start from 1
emotion_summary_df.index = range(1, len(emotion_summary_df) + 1)

emotion_summary_df = emotion_summary_df[['Language_Name'] + emotion_columns + ['Neutral', 'Total', 'Percentage']]

# Save DataFrame to CSV file
output_path = "/content/drive/MyDrive/TUD Master/LLM/ProjectVisualization/Final/Before_Preprocessing/All_Lang/emotion_summary.csv"
emotion_summary_df.to_csv(output_path, index=True)

emotion_summary_df

import matplotlib.pyplot as plt

# Select only the relevant emotion columns
emotion_columns = ["Anger", "Fear", "Joy", "Sadness", "Surprise", "Disgust", "Neutral"]
emotion_totals = emotion_summary_df[emotion_columns].sum()

# Define colors for each emotion
colors = ["red", "blue", "green", "purple", "orange", "brown", "gray"]

# Plot emotion representation
plt.figure(figsize=(12, 6))
emotion_totals.plot(kind="bar", color=colors, edgecolor='black')
plt.title("Total Emotion Representation")
plt.xlabel("Emotions")
plt.ylabel("Total Count")
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Select only the relevant emotion columns
emotion_columns = ["Anger", "Fear", "Joy", "Sadness", "Surprise", "Disgust", "Neutral"]
emotion_totals = emotion_summary_df[emotion_columns].sum()

# Define colors for each emotion
colors = sns.color_palette("husl", len(emotion_columns))

# Plot emotion representation using a horizontal bar chart
plt.figure(figsize=(12, 6))
plt.barh(emotion_columns, emotion_totals, color=colors, edgecolor='black')
plt.title("Total Emotion Representation", fontsize=14, fontweight='bold')
plt.xlabel("Total Count", fontsize=12)
plt.ylabel("Emotions", fontsize=12)
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.gca().invert_yaxis()  # Invert the y-axis for better readability

# Add values on bars
for index, value in enumerate(emotion_totals):
    plt.text(value + 200, index, str(value), fontsize=12, va='center', fontweight='bold')

plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Select only the relevant emotion columns
emotion_columns = ["Anger", "Fear", "Joy", "Sadness", "Surprise", "Disgust", "Neutral"]
emotion_totals = emotion_summary_df[emotion_columns].sum()

# Define colors for each emotion
colors = sns.color_palette("husl", len(emotion_columns))

# Plot emotion representation using a pie chart
plt.figure(figsize=(8, 8))
plt.pie(emotion_totals, labels=emotion_columns, autopct='%1.1f%%', colors=colors, startangle=140, wedgeprops={'edgecolor': 'black'})
plt.title("Total Emotion Representation", fontsize=14, fontweight='bold')
plt.show()

import matplotlib.pyplot as plt
import pandas as pd

# Select only the relevant emotion columns excluding total and percentage rows
emotion_columns = ["Anger", "Fear", "Joy", "Sadness", "Surprise", "Disgust", "Neutral"]
emotion_summary_cleaned = emotion_summary_df.iloc[:-2]  # Remove the last two rows (Total and Percentage)

# Plot stacked bar chart for emotions per language
plt.figure(figsize=(14, 8))
emotion_summary_cleaned.set_index("Language_Name")[emotion_columns].plot(kind="bar", stacked=True, colormap="tab10", figsize=(14, 8), edgecolor='black')
plt.title("Emotion Distribution Across Languages")
plt.xlabel("Languages")
plt.ylabel("Total Count")
plt.xticks(rotation=90)
plt.legend(title="Emotions")
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()